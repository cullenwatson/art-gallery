name: CMake

on:
  push:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  TEST_EXE: 22s_pa01_cullen_w
  INPUT_FILE: input.txt

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
      - name: Execute Project
      # This step calls your program with the command line args
      working-directory: ${{github.workspace}}/build
      run: ${{github.workspace}}/build/${{env.TEST_EXE}} ${{env.INPUT_FILE}}
      
      - name: Upload output files to GitHub so they can be reviewed
      # This step zips up the data folder and uploads it to Github for you to review.
      # Note that the sample input will be included as well.  Anything in the data folder will be
      # zipped.
      uses: actions/upload-artifact@v2
      with:
        name: project_output
        path: ${{github.workspace}}/build
      
